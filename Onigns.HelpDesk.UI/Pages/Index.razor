@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@using Onigns.HelpDesk.UI.Data;
@using Onigns.HelpDesk.UI.Services;
@using Onigns.HelpDesk.UI.ViewModels;
@inject IConfiguration _configuration
@inject EmailSenderService _EmailSender

@inherits OwningComponentBase<HelpDeskService>

<PageTitle>Index</PageTitle>

<h3>New Help Desk Ticket</h3>
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <SfDropDownList TItem="HelpDeskStatus" TValue="string"
                        PopupHeight="230px" Index=0
                        Placeholder="Ticket Status"
                        DataSource="@HelpDeskStatus.Statuses"
                        FloatLabelType="@FloatLabelType.Always"
                        @bind-Value="@objHelpDeskTicket.TicketStatus">
            <DropDownListFieldSettings Text="Text"
                                       Value="ID"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div>
        <SfDatePicker ID="TicketDate" Placeholder="Ticket Date"
                      FloatLabelType="@FloatLabelType.Always"
                      @bind-Value="@objHelpDeskTicket.TicketDate"
                      Max="DateTime.Now"
                      ShowClearButton="false"></SfDatePicker>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
    </div>
    <div>
        <SfTextBox Placeholder="Ticket Description"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketDescription"></SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
    </div>
    <div>
        <SfTextBox Placeholder="Requester Email"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketRequesterEmail"></SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketRequesterEmail)" />
    </div>
    <br /><br />
    <div class="e-footer-content">
        <div class="button-container">
            <button type="submit" class="e-btn e-normal e-primary">Save</button>
        </div>
    </div>
</EditForm>

<SfToast ID="toast_default"
         @ref="ToastObj"
         Title="Help Desk Ticket"
         Content="@ToastContent"
         Timeout="5000">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    SfToast? ToastObj;
    private string ToastContent { get; set; } = "";

    HelpDeskTicket objHelpDeskTicket = new HelpDeskTicket() { TicketDate = DateTime.Now };
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string ADMINISTRATION_ROLE = "Administrators";

    protected override async Task OnInitializedAsync()
    {
        // Get the current user.
        // Note: User may not be logged in.
        CurrentUser = (await authenticationStateTask).User;
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            // Create a HelpDeskTickets.
            HelpDeskTickets NewHelpDeskTickets = new HelpDeskTickets();
            // Set the values to the values entered
            // in the form.
            NewHelpDeskTickets.TicketDate = objHelpDeskTicket.TicketDate;
            NewHelpDeskTickets.TicketDescription = objHelpDeskTicket.TicketDescription;
            NewHelpDeskTickets.TicketRequesterEmail = objHelpDeskTicket.TicketRequesterEmail;
            NewHelpDeskTickets.TicketStatus = objHelpDeskTicket.TicketStatus;
            // Create a new GUID for this help desk ticket.
            NewHelpDeskTickets.TicketGuid = System.Guid.NewGuid().ToString();
            // Save the new help desk ticket.
            var result = @Service.CreateTicketAsync(NewHelpDeskTickets);

            // Send email.
            string AdministratorEmail = _configuration["SenderEmail"];
            await _EmailSender.SendEmail(
                "Help Desk Ticket Created",
                AdministratorEmail, // No need to pass an email because it goes to administrator.
                NewHelpDeskTickets.TicketGuid
            );

            // Clear the form.
            objHelpDeskTicket = new HelpDeskTicket();
            // Show the Toast.
            ToastContent = "Saved!";
            await Task.Delay(100);
            await this.ToastObj.ShowAsync();

        }
        catch (Exception ex)
        {
            ToastContent = ex.GetBaseException().Message;
            await this.ToastObj.ShowAsync();
        }
    }
}