@page "/administration"
@using Onigns.HelpDesk.UI.Data;
@using Onigns.HelpDesk.UI.Services;
@using Onigns.HelpDesk.UI.ViewModels;
@inject EmailSenderService _EmailSender

@inherits OwningComponentBase<HelpDeskService>

@*AuthorizeView control ensures that *@
@*Only users in the Administrators role can view this content*@

<AuthorizeView Roles="Administrators">
    <div>
        <div id="target" style="height: 500px;">
            <SfGrid ID="Grid" @ref="gridObj"
                    DataSource="colHelpDeskTickets"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowResizing="true"
                    AllowReordering="true">
                <GridPageSettings PageSize="5"></GridPageSettings>
                <GridEvents CommandClicked="OnCommandClicked"
                            TValue="HelpDeskTickets">
                </GridEvents>
                <GridColumns>
                    <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type=CommandButtonType.Edit
                                               ButtonOption="@(new CommandButtonOptions(){ Content = "Edit" })">
                            </GridCommandColumn>
                            <GridCommandColumn Type=CommandButtonType.Delete
                                               ButtonOption="@(new CommandButtonOptions(){ Content = "Delete" })">
                            </GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                    <GridColumn IsPrimaryKey="true" Field=@nameof(HelpDeskTickets.Id)
                                HeaderText="ID #" TextAlign="@TextAlign.Left"
                                Width="70">
                    </GridColumn>
                    <GridColumn Field=@nameof(HelpDeskTickets.TicketStatus)
                                HeaderText="Status" TextAlign="@TextAlign.Left"
                                Width="80">
                    </GridColumn>
                    <GridColumn Field=@nameof(HelpDeskTickets.TicketDate)
                                HeaderText="Date" TextAlign="@TextAlign.Left"
                                Width="80">
                    </GridColumn>
                    <GridColumn Field=@nameof(HelpDeskTickets.TicketDescription)
                                HeaderText="Description" TextAlign="@TextAlign.Left"
                                Width="150">
                    </GridColumn>
                    <GridColumn Field=@nameof(HelpDeskTickets.TicketRequesterEmail)
                                HeaderText="Requester" TextAlign="@TextAlign.Left"
                                Width="150">
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>

    <SfDialog Target="#target"
              Width="100px"
              Height="130px"
              IsModal="true"
              ShowCloseIcon="false"
              @bind-Visible="DeleteRecordConfirmVisibility">
        <DialogTemplates>
            <Header> DELETE RECORD ? </Header>
            <Content>
                <div class="button-container">
                    <button type="submit"
                            class="e-btn e-normal e-primary"
                            @onclick="ConfirmDeleteYes">
                        Yes
                    </button>
                    <button type="submit"
                            class="e-btn e-normal"
                            @onclick="ConfirmDeleteNo">
                        No
                    </button>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
    <SfDialog Target="#target"
              Width="500px"
              Height="500px"
              IsModal="true"
              ShowCloseIcon="true"
              @bind-Visible="EditDialogVisibility">
        <DialogTemplates>
            <Header> EDIT TICKET # @SelectedTicket.Id</Header>
            <Content>
                <EditTicket SelectedTicket="@SelectedTicket" />
            </Content>
            <FooterTemplate>
                <div class="button-container">
                    <button type="submit"
                            class="e-btn e-normal e-primary"
                            @onclick="SaveTicket">
                        Save
                    </button>
                </div>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    SfGrid<HelpDeskTickets> gridObj;

    public IQueryable<HelpDeskTickets> colHelpDeskTickets { get; set; }
    private HelpDeskTickets SelectedTicket = new HelpDeskTickets();
    HelpDeskTicket objHelpDeskTicket = new HelpDeskTicket() { TicketDate = DateTime.Now };
    bool DeleteRecordConfirmVisibility;
    bool EditDialogVisibility;

    protected override void OnInitialized()
    {
        // GetHelpDeskTickets returns IQueryable that the
        // SfGrid will use to only pull records for the
        // page that is currently selected.
        colHelpDeskTickets = @Service.GetHelpDeskTickets();
    }
    public async void OnCommandClicked(CommandClickEventArgs<HelpDeskTickets> args)
    {
        // Get the selected help desk ticket.
        SelectedTicket = await @Service.GetHelpDeskTicketAsync(args.RowData.TicketGuid);
        if (args.CommandColumn.ButtonOption.Content == "Delete")
        {
            // Open Delete confirmation dialog.
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }
        else if (args.CommandColumn.ButtonOption.Content == "Edit")
        {
            // Open the Edit dialog.
            this.EditDialogVisibility = true;
            StateHasChanged();
        }
    }

    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confirm they want to delete the record.
        this.DeleteRecordConfirmVisibility = false;
    }

    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // selected help desk ticket.
        // Delete the record.
        var result = await @Service.DeleteHelpDeskTicketsAsync(SelectedTicket);
        // Close the dialog.
        this.DeleteRecordConfirmVisibility = false;
        // Refresh the SfGrid
        // so the deleted record will not show.
        await gridObj.Refresh();
    }

    public async Task SaveTicket()
    {
        // Update the selected help desk ticket.
        var result =
        await @Service.UpdateTicketAsync(SelectedTicket);

        // Send email to requester.
        await _EmailSender.SendEmail(
            "Help Desk Ticket Updated",
            SelectedTicket.TicketRequesterEmail,
            SelectedTicket.TicketGuid
        );

        // Close the Edit dialog.
        this.EditDialogVisibility = false;
        // Refresh the SfGrid
        // so the changes to the selected
        // help desk ticket are reflected.
        gridObj.Refresh();
    }
}